"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/calculator/page",{

/***/ "(app-pages-browser)/./src/lib/calculator.ts":
/*!*******************************!*\
  !*** ./src/lib/calculator.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateChildRaisingCost: () => (/* binding */ calculateChildRaisingCost),\n/* harmony export */   getCostPercentages: () => (/* binding */ getCostPercentages),\n/* harmony export */   getNationalAverageCost: () => (/* binding */ getNationalAverageCost)\n/* harmony export */ });\n/**\n * 城市等级费用系数\n */ const CITY_TIER_MULTIPLIERS = {\n    tier1: 1.5,\n    tier2: 1.2,\n    tier3: 1.0\n};\n/**\n * 教育类型费用系数\n */ const EDUCATION_MULTIPLIERS = {\n    public: 1.0,\n    private: 2.5,\n    international: 4.0\n};\n/**\n * 医疗水平费用系数\n */ const HEALTHCARE_MULTIPLIERS = {\n    basic: 1.0,\n    premium: 2.0\n};\n/**\n * 不同年龄段的基础年度费用（三线城市，基础医疗）\n */ const BASE_ANNUAL_COSTS_BY_AGE = {\n    '0-1': {\n        basicLiving: 18000,\n        education: 0,\n        healthcare: 1500,\n        extracurricular: 0,\n        others: 3000\n    },\n    '2-3': {\n        basicLiving: 16000,\n        education: 2000,\n        healthcare: 1800,\n        extracurricular: 1000,\n        others: 3500\n    },\n    '4-6': {\n        basicLiving: 15000,\n        education: 6000,\n        healthcare: 1500,\n        extracurricular: 3000,\n        others: 4000\n    },\n    '7-12': {\n        basicLiving: 16000,\n        education: 8000,\n        healthcare: 1200,\n        extracurricular: 5000,\n        others: 4500\n    },\n    '13-15': {\n        basicLiving: 18000,\n        education: 12000,\n        healthcare: 1500,\n        extracurricular: 8000,\n        others: 5000\n    },\n    '16-18': {\n        basicLiving: 20000,\n        education: 15000,\n        healthcare: 1500,\n        extracurricular: 12000,\n        others: 6000\n    }\n};\n/**\n * 根据年龄获取年龄段\n */ function getAgeGroup(age) {\n    if (age <= 1) return '0-1';\n    if (age <= 3) return '2-3';\n    if (age <= 6) return '4-6';\n    if (age <= 12) return '7-12';\n    if (age <= 15) return '13-15';\n    return '16-18';\n}\n/**\n * 计算费用分解\n */ function calculateCostBreakdown(data) {\n    const cityMultiplier = CITY_TIER_MULTIPLIERS[data.location];\n    const educationMultiplier = EDUCATION_MULTIPLIERS[data.educationLevel || 'public'];\n    const healthcareMultiplier = HEALTHCARE_MULTIPLIERS[data.healthcareLevel || 'basic'];\n    const ageGroup = getAgeGroup(data.childAge);\n    const baseCosts = BASE_ANNUAL_COSTS_BY_AGE[ageGroup];\n    // 基础生活费（受城市等级影响）\n    const basicLiving = baseCosts.basicLiving * cityMultiplier;\n    // 教育费用（受城市等级、教育类型影响，0-1岁无教育费用）\n    let education = baseCosts.education * cityMultiplier;\n    if (data.childAge > 1 && baseCosts.education > 0) {\n        education = education * educationMultiplier;\n    }\n    // 医疗费用（受城市等级和医疗水平影响）\n    const healthcare = baseCosts.healthcare * cityMultiplier * healthcareMultiplier;\n    // 课外活动费用（可选，受城市等级影响，0-1岁基本无课外活动）\n    let extracurricular = 0;\n    if (data.extracurricular && baseCosts.extracurricular > 0) {\n        extracurricular = baseCosts.extracurricular * cityMultiplier;\n        // 年龄越大，课外活动选择越多，费用可能更高\n        if (data.childAge >= 7) {\n            extracurricular = extracurricular * 1.2;\n        }\n    }\n    // 其他费用（受城市等级影响）\n    const others = baseCosts.others * cityMultiplier;\n    return {\n        basicLiving: Math.round(basicLiving),\n        education: Math.round(education),\n        healthcare: Math.round(healthcare),\n        extracurricular: Math.round(extracurricular),\n        others: Math.round(others)\n    };\n}\n/**\n * 生成建议\n */ function generateRecommendations(data, breakdown) {\n    const recommendations = [];\n    const totalCost = Object.values(breakdown).reduce((sum, cost)=>sum + cost, 0);\n    const monthlyIncome = data.monthlyIncome;\n    const annualIncome = monthlyIncome * 12;\n    const costRatio = totalCost / annualIncome;\n    // 基于费用占收入比例的建议\n    if (costRatio > 0.5) {\n        recommendations.push('养娃成本占家庭收入比例较高，建议适当调整教育和生活标准，或考虑增加收入来源。');\n    } else if (costRatio > 0.3) {\n        recommendations.push('养娃成本在合理范围内，建议做好长期财务规划，为孩子的未来教育储备资金。');\n    } else {\n        recommendations.push('您的经济条件较为宽裕，可以考虑为孩子提供更好的教育和生活条件。');\n    }\n    // 基于城市等级的建议\n    if (data.location === 'tier1') {\n        recommendations.push('一线城市生活成本较高，建议重点关注教育资源的性价比，合理规划住房和交通支出。');\n    } else if (data.location === 'tier2') {\n        recommendations.push('二线城市具有较好的教育资源和相对合理的生活成本，建议平衡教育投入和生活质量。');\n    } else {\n        recommendations.push('三线城市生活成本相对较低，可以考虑增加教育投入，为孩子提供更多学习机会。');\n    }\n    // 基于教育选择的建议\n    if (data.educationLevel === 'international') {\n        recommendations.push('国际教育费用较高，建议提前做好长期财务规划，同时关注教育质量和孩子的适应性。');\n    } else if (data.educationLevel === 'private') {\n        recommendations.push('私立教育可以提供更好的教育环境，建议综合考虑教育质量、费用和家庭经济状况。');\n    } else {\n        recommendations.push('公立教育性价比较高，可以将节省的费用用于课外培训和兴趣发展。');\n    }\n    // 基于课外活动的建议\n    if (data.extracurricular) {\n        recommendations.push('课外活动有助于孩子全面发展，建议选择适合孩子兴趣和天赋的项目，避免过度投入。');\n    } else {\n        recommendations.push('适当的课外活动可以丰富孩子的学习体验，建议根据孩子的兴趣适度参与。');\n    }\n    // 基于年龄的建议\n    const ageGroup = getAgeGroup(data.childAge);\n    if (ageGroup === '0-1') {\n        recommendations.push('婴儿期重点关注营养和健康，奶粉、尿布是主要支出。国家免疫疫苗免费，自费疫苗可根据经济情况选择。建议选择品质可靠的婴儿用品，不必过度追求高端品牌。');\n    } else if (ageGroup === '2-3') {\n        recommendations.push('幼儿期开始有简单的早教需求，可以选择一些启蒙读物和益智玩具。医疗费用主要是感冒发烧等常见病，有医保报销大部分费用。');\n    } else if (ageGroup === '4-6') {\n        recommendations.push('学前期需要考虑幼儿园费用，这是教育支出的开始。建议选择性价比合适的幼儿园，重点关注教育质量。医疗费用较低，主要做好预防保健。');\n    } else if (ageGroup === '7-12') {\n        recommendations.push('小学期间教育费用相对稳定，课外培训开始增加。这个年龄段身体健康，医疗费用最低。建议根据孩子兴趣选择1-2项特长培养，避免过度报班。');\n    } else if (ageGroup === '13-15') {\n        recommendations.push('初中期间学习任务加重，补习费用可能大幅增加。青春期可能有一些健康问题需要关注。建议合理规划教育投入，关注孩子的学习效率和身心健康。');\n    } else {\n        recommendations.push('高中期间面临升学压力，教育投入达到峰值。医疗费用相对稳定，主要关注心理健康。建议重点投入有效的学习资源，同时为大学费用做好储备。');\n    }\n    // 医疗费用相关建议\n    if (data.healthcareLevel === 'premium') {\n        recommendations.push('选择高端医疗服务可以获得更好的就医体验，但基础医疗已能满足大部分需求。建议根据家庭经济状况合理选择。');\n    } else {\n        recommendations.push('基础医疗配合国家医保政策已能很好地保障孩子健康，重点做好预防保健和健康生活习惯培养。');\n    }\n    return recommendations;\n}\n/**\n * 主要计算函数\n */ function calculateChildRaisingCost(data) {\n    // 计算费用分解\n    const breakdown = calculateCostBreakdown(data);\n    // 计算总费用\n    const totalAnnualCost = Object.values(breakdown).reduce((sum, cost)=>sum + cost, 0);\n    const monthlyAverageCost = Math.round(totalAnnualCost / 12);\n    // 生成建议\n    const recommendations = generateRecommendations(data, breakdown);\n    return {\n        totalAnnualCost,\n        monthlyAverageCost,\n        breakdown,\n        recommendations,\n        userInput: data,\n        timestamp: new Date().toISOString()\n    };\n}\n/**\n * 获取费用占比\n */ function getCostPercentages(breakdown) {\n    const total = Object.values(breakdown).reduce((sum, cost)=>sum + cost, 0);\n    return {\n        basicLiving: Math.round(breakdown.basicLiving / total * 100),\n        education: Math.round(breakdown.education / total * 100),\n        healthcare: Math.round(breakdown.healthcare / total * 100),\n        extracurricular: Math.round(breakdown.extracurricular / total * 100),\n        others: Math.round(breakdown.others / total * 100)\n    };\n}\n/**\n * 获取全国平均费用（用于对比）\n */ function getNationalAverageCost(childAge) {\n    const ageGroup = getAgeGroup(childAge);\n    const baseCosts = BASE_ANNUAL_COSTS_BY_AGE[ageGroup];\n    const baseCost = Object.values(baseCosts).reduce((sum, cost)=>sum + cost, 0);\n    // 全国平均使用二线城市标准\n    return Math.round(baseCost * CITY_TIER_MULTIPLIERS.tier2);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/calculator.ts\n"));

/***/ })

});